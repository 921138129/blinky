
<!doctype html>
<html>
<title>blinky - a fisheye mod for Quake</title>

<head>

<style type="text/css">

body
{
   line-height:1.5em;
}

div.globe_images
{
   height:170px;
}

div.globe_images img
{
   float:left;
   margin:2px;
}

h1,h2,h3,h4,h5,p
{
   clear:both;
}

</style>

</head>

<body>

<h1>blinky</h1>
an experiment in panoramic gaming

<hr/>
<strong>NOTE</strong>: This research page is under construction but the project is complete and available for download below.
<hr/>

<h2>Abstract</h2>
<p>
In photography, it is common to overcome the limitations of a camera's Field of View (FOV) by "stitching" multiple photographs together into a panorama.  This method has only been demonstrated once in the context of a game by Fisheye Quake in 1999.  It stitched six views into a single perspective using the <em>equidistant fisheye</em> projection.  We wish to continue in this direction by exploring the practicality of other panoramic methods in gameplay.  
</p>
<p>
To this end, we introduce an extension to Fisheye Quake called Blinky.  It provides a new front-end for customizing your ingame panoramic perspective.  Specifically, the <em>environment map</em> and <em>projection</em> logic are abstracted into Lua scripts, called Globe and Lens scripts, respectively.  In this paper, we discuss this new architecture and the experimental perspectives that were created with it.
</p>
<p>
As a result, we find that the Panini projection produces the most practical wide angle perspective for gameplay that is less prone to nausea than the other projections.
</p>

<hr/>

<h2>Preview</h2>
<object width="640" height="390"><param name="movie" value="http://www.youtube.com/v/jQOJ3yCK8pI&hl=en_US&feature=player_embedded&version=3"></param><param name="allowFullScreen" value="true"></param><param name="allowScriptAccess" value="always"></param><embed src="http://www.youtube.com/v/jQOJ3yCK8pI&hl=en_US&feature=player_embedded&version=3" type="application/x-shockwave-flash" allowfullscreen="true" allowScriptAccess="always" width="640" height="390"></embed></object>

<hr/>

<h2>Download</h2>

<ul>
<li><a href="blinky-0.1.zip">blinky for windows xp</a></li>
<li><a href="http://github.com/shaunew/blinky">source code</a></li>
</ul>

<hr/>

<h2>Install</h2>

<h3>Windows</h3>
<p>
Windows users must extract the folder to their Quake directory and run tyr-quake.exe to start.
</p>

<h3>Linux</h3>
<p>
Linux users will have to compile from source.  LuaJIT is a required library.
</p>

<p>
After installing LuaJIT, run the following to build:
<pre>
$ make prepare
$ make tyr-quake
</pre>
Now copy tyr-quake to your quake directory, and copy the globes/ and lenses/ folders to your $HOME/.tyrquake directory.
</p>

<hr/>

<h2>Commands</h2>
Bring down the console with the tilde (~) key and you can type the following commands:

<pre>
globe &lt;name&gt; : choose a globe (affects picture quality and render speed)
lens &lt;name&gt; : choose a lens (affects the shape of your view)
hfov &lt;degrees&gt; : zoom by specifying horizontal FOV
vfov &lt;degrees&gt; : zoom by specifying vertical FOV
hfit : zoom by fitting your view horizontal bounds in the screen
hfit : zoom by fitting your view's vertical bounds in the screen
fit : zoom by fitting your whole view in the screen
rubix : display colored grid for each rendered view in the globe
</pre>

<strong>Note</strong>: the globe and lens commands both have tab completion</p>

<h3>Examples (as seen in video above)</h3>
<p>
A very usable modern panoramic projection called Panini:
<pre>
globe cube
lens panini
hfov 180
</pre>
</p>

<p>
A full map projection used by National Geographic:
<pre>
globe tetra
lens winkeltripel
fit
</pre>

<hr/>

<h2>Globes</h2>
<p>
A Globe script contains a collection of square plates.  Each plate provides a piece of the surrounding image.  The script describes where to point the camera and how far to zoom for each plate image.  It is called a Globe because you can imagine morphing these plates into a sphere of pixels around you. 
</p>
<p>
Blinky comes bundled with the following Globes.
</p>

<h3>Cube</h3>
<p>
This is the standard cubemap that renders six 90&deg; views.  It functions like a Skybox and has no overlap.  It is the highest quality Globe, but has the overhead of having to render six views per frame:
</p>

<a href="shots/cube_full.gif"><img src="shots/cube_full.gif" width="600" /></a>

<h3>Triangular Prism</h3>
<p>
This is a triangular prism that renders a total of five views:  three 120&deg; views and two 128&deg; views for the top and bottom, with some overlap between the plates.  It is second to the Cube Globe for image quality, but slightly faster in rendering.
</p>

<a href="shots/trism_full.gif"><img src="shots/trism_full.gif" width="600" /></a>

<h3>Tetrahedron</h3>
<p>
This is a tetrahedron that renders a total of four 142&deg; views, which is the minimum amount of plates required to capture the whole environment.  There is some overlap between the plates.  It is the fastest, but lowest quality Globe.
</p>

<a href="shots/tetra_full.gif"><img src="shots/tetra_full.gif" width="600" /></a>

<h4>Performance Note</h4>
Blinky only renders a Globe's plate if any part of it is visible on the screen.  

<hr/>

<h2>Lenses</h2>
<p>
A Lens script takes the Globe (a sphere of surrounding pixels) and projects it to flat frame.  A "forward map" takes a point on the Globe and returns a point on the frame.  An "inverse map" does that opposite by taking a point on the frame and returning a point on the Globe.
</p>

<strong>Note</strong> Inverse maps are prefered over Forward maps. 

<hr/>

<h2>Acknowledgements</h2>

<ul>
   <li><a href="http://strlen.com/gfxengine/fisheyequake/">Aardappel for Fisheye Quake</a></li>
   <li><a href="http://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function">Peter Weiden for Fisheye Projection illustrations</a></li>
   <li><a href="http://vedutismo.net/Pannini/">Thomas K. Sharpless for Panini Projection</a></li>
   <li><a href="http://home.comcast.net/~gevenden56/proj/">Gerald Evenden for libproj</a></li>
   <li><a href="http://www.progonos.com/furuti/MapProj/Normal/TOC/cartTOC.html">Carlos Furuti for Progonos</a></li>
   <li>Ashlee for the support</li>
</ul>

<hr/>

<h2>History</h2>
Project Start: April 2011<br/>
Last Update: August 12, 2011 </br>

</body>

</html>
